package com.sdlaviva.gaming.funkysquares.screens;

import java.util.HashMap;
import java.util.Map;

import com.badlogic.gdx.Application.ApplicationType;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.sdlaviva.gaming.funkysquares.model.GameField;
//import android.util.Log;

public class GameScreen implements Screen, InputProcessor
{

	public OrthographicCamera cam;
	public GameField mainField;

	TextureAtlas mainAtlas;
	public Map<String, TextureRegion> mainTexturesMap = new HashMap<String, TextureRegion>();
	
	public int width;
	public int height;
	
	SpriteBatch spriteBatch;
	
	@Override
	public void show() {
		
		this.cam = new OrthographicCamera(GameField.CAMERA_WIDTH, GameField.CAMERA_HEIGHT);
		setCamera(GameField.CAMERA_WIDTH/2f, GameField.CAMERA_HEIGHT/2f);
		spriteBatch = new SpriteBatch();
		loadTextures();
		mainField = new GameField(Gdx.graphics.getWidth(),Gdx.graphics.getHeight(),false,spriteBatch,mainTexturesMap);
		
		Gdx.input.setInputProcessor(mainField);
			
	}
	
	@Override
	public void hide() {
		
		Gdx.input.setInputProcessor(null);
	}
	
	@Override
	public void pause() {
		
		
	}
	
	@Override
	public void resume() {
		Gdx.input.setInputProcessor(mainField);
		
	}
	
	@Override
	public void resize (int width, int height){
		this.width = width;
		this.height = height;
		
		mainField.setViewport(width, height, true);
		
	}
	
	@Override
	public void render (float delta){
		Gdx.gl.glClearColor(0,0,0,0);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		mainField.update(delta);
		mainField.draw();

	}
	
	@Override
	public void dispose () {
		
		Gdx.input.setInputProcessor(null);
	}
	
	public void loadSprites(){
		loadTextures();
	}
	
	private void loadTextures(){
		
		//generating font
		FileHandle fontFile = Gdx.files.internal("Pinewood.ttf");
        FreeTypeFontGenerator generator = new FreeTypeFontGenerator(fontFile);

		 
		//TextureAtlas atlas;
		mainAtlas = new TextureAtlas(Gdx.files.internal("spritepacks/FunkySquaresSprites.pack"));
		
		/* color bricks loading */
		
		mainTexturesMap.put("blueNod",mainAtlas.findRegion("blue"));
		mainTexturesMap.put("greenNod",mainAtlas.findRegion("green"));
		mainTexturesMap.put("greyNod",mainAtlas.findRegion("red"));
		mainTexturesMap.put("pinkNod",mainAtlas.findRegion("pink"));
		mainTexturesMap.put("yellowNod",mainAtlas.findRegion("orange"));
		

		/* loading texture for restart button */

		mainTexturesMap.put("restartUp", mainAtlas.findRegion("button_restart1"));
		mainTexturesMap.put("restartDown", mainAtlas.findRegion("button_restart2"));
		
		/* loading background */
		
		mainTexturesMap.put("background", mainAtlas.findRegion("background"));
		
		/* loading field edges */
		mainTexturesMap.put("corner", mainAtlas.findRegion("corner"));
		mainTexturesMap.put("edge", mainAtlas.findRegion("edge"));
		
		/* loading button textures */
		mainTexturesMap.put("left_up",mainAtlas.findRegion("control_left_unpressed"));
		mainTexturesMap.put("left_down",mainAtlas.findRegion("control_left_pressed"));
		mainTexturesMap.put("right_up",mainAtlas.findRegion("control_right_unpressed"));
		mainTexturesMap.put("right_down",mainAtlas.findRegion("control_right_pressed"));
		mainTexturesMap.put("up_up",mainAtlas.findRegion("control_up_unpressed"));
		mainTexturesMap.put("up_down",mainAtlas.findRegion("control_up_pressed"));
		mainTexturesMap.put("down_up",mainAtlas.findRegion("control_down_unpressed"));
		mainTexturesMap.put("down_down",mainAtlas.findRegion("control_down_pressed"));
		
		/* loading score font textures */
		mainTexturesMap.put("score",mainAtlas.findRegion("score"));
		Texture numTex = mainAtlas.findRegion("numbers").getTexture();
		TextureRegion scoreNumTex[][] = mainAtlas.findRegion("numbers").split(numTex, numTex.getWidth()/10, numTex.getHeight());
		mainTexturesMap.put("num0",scoreNumTex[0][0]);
		mainTexturesMap.put("num1",scoreNumTex[0][1]);
		mainTexturesMap.put("num2",scoreNumTex[0][2]);
		mainTexturesMap.put("num3",scoreNumTex[0][3]);
		mainTexturesMap.put("num4",scoreNumTex[0][4]);
		mainTexturesMap.put("num5",scoreNumTex[0][5]);
		mainTexturesMap.put("num6",scoreNumTex[0][6]);
		mainTexturesMap.put("num7",scoreNumTex[0][7]);
		mainTexturesMap.put("num8",scoreNumTex[0][8]);
		mainTexturesMap.put("num9",scoreNumTex[0][9]);
		
		/*game over text */
		// "game"
		mainTexturesMap.put("game",mainAtlas.findRegion("game"));
		// "over"
		mainTexturesMap.put("over",mainAtlas.findRegion("over"));
		

	}
	
	
	public void setCamera(float x, float y){
		this.cam.position.set(x,y,0);
		this.cam.update();
		
		
	}
	
	@Override
	public boolean touchDown(int x, int y, int pointer, int button){
		if(!Gdx.app.getType().equals(ApplicationType.Android))
			return false;
		return true;
	}
	 
	@Override
	public boolean touchUp(int x, int y, int pointer, int button){
		if(!Gdx.app.getType().equals(ApplicationType.Android))
			return false;
		return true;

	}

	@Override
	public boolean touchDragged(int x, int y, int pointer){
		return false;
	}
	
	@Override
	public boolean scrolled(int delta){
		return false;
	}
	
	@Override
	public boolean keyUp(int code){
		return false;
	}
	
	@Override
	public boolean keyDown(int code){
		return true;
	}
	
	@Override
	public boolean keyTyped(char key){
		return false;
	}
	
	@Override
	public boolean mouseMoved(int x, int y){
		return false;
	}
}
